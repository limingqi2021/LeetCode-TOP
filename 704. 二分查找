class Solution {
public:
    int search(vector<int>& nums, int target) {

        // int left=0,right=nums.size()-1;
        // while(left<=right){
        //     int mid=(left+right)/2;
        //     if(nums[mid]==target){
        //         return mid;
        //     }
        //     else if(nums[mid]>target){
        //         right=mid-1;
        //     }
        //     else if(nums[mid]<target){
        //         left=mid+1;
        //     }
        // }
        // return -1;

        //寻找右侧边界
        // int left=0,right=nums.size();
        // while(left<right){
        //     int mid=(left+right)/2;
        //     if(nums[mid]<=target)
        //     {
        //         left=mid+1;
        //     }else{
        //         right=mid;
        //     }
        // }
        // if(left==0||nums[left-1]!=target)
        //     return -1;
        // return left-1;
        int left = 0, right = nums.size() - 1;
        while (left <= right) {
        int mid = left + (right - left) / 2;
        if (nums[mid] < target) {
            left = mid + 1;
        } else if (nums[mid] > target) {
            right = mid - 1;
        } else if (nums[mid] == target) {
            // 别返回，锁定右侧边界
            left = mid + 1;
        }
    }
    // 最后要检查 right 越界的情况
    if (right < 0 || nums[right] != target)
        return -1;
    return right;

    //寻找左侧边界
    //     int left=0,right=nums.size();
    //     while(left<right){
    //         int mid=(left+right)/2;
    //         if(nums[mid]<target)
    //         {
    //             left=mid+1;
    //         }else{
    //             right=mid;
    //         }
    //     }
    //     if(left>=nums.size()||nums[left]!=target)
    //         return -1;
    //     return left;
    // }
    
    // int left = 0, right = nums.size() - 1;
    // while (left <= right) {
    //     int mid = left + (right - left) / 2;
    //     if (nums[mid] < target) {
    //         left = mid + 1;
    //     } else if (nums[mid] > target) {
    //         right = mid - 1;
    //     } else if (nums[mid] == target) {
    //         // 别返回，锁定左侧边界
    //         right = mid - 1;
    //     }
    // }
    // // 最后要检查 left 越界的情况
    // if (left >= nums.size() || nums[left] != target)
    //     return -1;
    // return left;
    }    
};
