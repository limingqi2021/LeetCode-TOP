struct DLinkNode{
    int key,val;
    DLinkNode* pre;
    DLinkNode* next;
    DLinkNode():key(0),val(0),pre(nullptr),next(nullptr){}
    DLinkNode(int _key,int _val):key(_key),val(_val),pre(nullptr),next(nullptr){}
};

class LRUCache {
    unordered_map<int,DLinkNode*> cache;
    DLinkNode* head;
    DLinkNode* tail;
    int size;
    int capacity;
public:
    LRUCache(int _capacity) {
        capacity=_capacity;
        size=0;
        head=new DLinkNode();
        tail=new DLinkNode();
        head->next=tail;
        tail->pre=head;
    }
    
    int get(int key) {
        if(!cache.count(key)){
            return -1;
        }
        DLinkNode* node=cache[key];
        moveToHead(node);
        return node->val;
    }
    
    void put(int key, int value) {
        if(!cache.count(key)){
            DLinkNode* node=new DLinkNode(key,value);
            cache[key]=node;
            addToHead(node);
            size++;
            if(size>capacity){
                DLinkNode* removed=tail->pre;
                removedNode(removed);
                cache.erase(removed->key);
                //delete removed;
                size--;
            }
        }
        else{
            DLinkNode* node=cache[key];
            node->val=value;
            moveToHead(node);
        }
    }
    void addToHead(DLinkNode* node){
        node->pre=head;
        node->next=head->next;
        head->next->pre=node;
        head->next=node;
    }
    void removedNode(DLinkNode* node){
        node->pre->next=node->next;
        node->next->pre=node->pre;
    }
    void moveToHead(DLinkNode* node){
        removedNode(node);
        addToHead(node);
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
