/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    void reorderList(ListNode* head) {
        ListNode* l1=head;
        ListNode* mid=midNode(head);
        ListNode* l2=mid->next;
        mid->next=nullptr;
        l2=reverseList(l2);
        mergeList(l1,l2);
    }
    ListNode* midNode(ListNode* head){
        ListNode* low=head,*fast=head;
        while(fast->next!=nullptr&& fast->next->next!=nullptr){
            low=low->next;
            fast=fast->next->next;
        }
        return low;
    }
    ListNode* reverseList(ListNode* head){
        ListNode* pre=nullptr;
        ListNode* cur=head;
        while(cur!=nullptr){
            ListNode* temp=cur->next;
            cur->next=pre;
            pre=cur;
            cur=temp;
        }
        return pre;
    }
    ListNode* mergeList(ListNode* l1,ListNode* l2){
        ListNode* p1=l1,* p2=l2;
        while(l1!=nullptr&&l2!=nullptr){
            ListNode* t1=l1->next;
            l1->next=l2;
            l1=t1;
            ListNode* t2=l2->next;
            l2->next=l1;
            l2=t2;
        }
        return p1;
    }
};
