class Solution {
public:
        vector<vector<int>> edge;
        vector<int> visit;
        bool res=true;
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        // vector<vector<int>> edge(numCourses);
        // vector<int> indegree(numCourses);
        // // for(auto i:prerequisites){
        // //     indegree[i[0]]++;
        // //     edge[i[1]].push_back(i[0]);
        // // }
        // for(int i=0;i<prerequisites.size();i++){
        //     indegree[prerequisites[i][0]]++;
        //     edge[prerequisites[i][1]].push_back(prerequisites[i][0]);
        // }
        // queue<int> q;
        // for(int i=0;i<numCourses;i++){
        //     if(indegree[i]==0)
        //     q.push(i);
        // }
        // int visit=0;
        // while(!q.empty()){
        //     visit++;
        //     int temp=q.front();
        //     q.pop();
        //     for(int i=0;i<edge[temp].size();i++){
        //         indegree[edge[temp][i]]--;
        //         if(indegree[edge[temp][i]]==0)
        //             q.push(edge[temp][i]);
        //     }
        // }
        //return visit==numCourses;
        edge.resize(numCourses);
        visit.resize(numCourses);
        for(int i=0;i<prerequisites.size();i++){
            edge[prerequisites[i][0]].push_back(prerequisites[i][1]);
        }
        for(int i=0;i<numCourses&&res==true;i++){
            if(visit[i]==0)
            {
                dfs(i);
            }
        }
        return res;
    }
    void dfs(int k){
        visit[k]=1;
        for(int i=0;i<edge[k].size();i++){
            if(visit[edge[k][i]]==0)
            {
                dfs(edge[k][i]);
                if(!res)
                return;
            }else if(visit[edge[k][i]]==1){
                res=false;
                return;
            }
        }
        visit[k]=2;
    }
};
