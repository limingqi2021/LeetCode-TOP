/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* last=nullptr;
    vector<TreeNode*> res;
    stack<TreeNode*> s;
    void flatten(TreeNode* root) {
        if(root==nullptr)
        return;
        // flatten(root->right);
        // flatten(root->left);
        // root->right=last;
        // root->left=nullptr;
        // last=root;
    //     preorder(root);
    //     for(int i=1;i<res.size();i++){
    //         TreeNode* pre=res[i-1];
    //         TreeNode* cur=res[i];
    //         pre->left=nullptr;
    //         pre->right=cur;
    //     }
    // }
    // void preorder(TreeNode* root){
    //     if(root==nullptr)
    //     return ;
    //     res.push_back(root);
    //     preorder(root->left);
    //     preorder(root->right);
    // }
    while(!s.empty()||root){
        while(root){
            res.push_back(root);
            s.push(root->right);
            root=root->left;
        }
        root=s.top();
        s.pop();
    }
        for(int i=1;i<res.size();i++){
            TreeNode* pre=res[i-1];
            TreeNode* cur=res[i];
            pre->left=nullptr;
            pre->right=cur;
        }
    }
    

};
