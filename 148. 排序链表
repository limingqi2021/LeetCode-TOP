/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
     
        if(head==nullptr||head->next==nullptr)
        return head;
        ListNode* fast=head->next,*low=head;
        while(fast!=nullptr&&fast->next!=nullptr){
            low=low->next;
            fast=fast->next->next;
        }
        ListNode* temp=low->next;
        low->next=nullptr;
        ListNode* left=sortList(head);
        ListNode* right=sortList(temp);
        return mergetwoList(left,right);
    }
    ListNode* mergetwoList(ListNode* a,ListNode* b){
        ListNode* dummynode=new ListNode(0);
        ListNode* t=dummynode;
        while(a!=nullptr&&b!=nullptr){
        //while((!a)&&(!b)){
            if(a->val<b->val){
                t->next=a;
                a=a->next;
            }else{
                t->next=b;
                b=b->next;
            }
            t=t->next;
        }
        t->next=a==nullptr?b:a;
        return dummynode->next;
    }
};
