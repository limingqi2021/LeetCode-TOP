/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    unordered_map<int,int> index;
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if(preorder.size()==0)
        return nullptr;
        for(int i=0;i<preorder.size();i++){
            index[inorder[i]]=i;
        }
       return create(preorder,inorder,0,preorder.size()-1,0,inorder.size()-1);
    }

    TreeNode* create(vector<int>& preorder,vector<int>& inorder,int preL,int preR,int inL,int inR){
        if(preL>preR){
            return nullptr;
        }
        TreeNode* root=new TreeNode(preorder[preL]);
        // int k;
        // for(k=inL;k<=inR;k++){
        //     if(inorder[k]==preorder[preL]){
        //     break;
        //     }
        // }
        int k=index[preorder[preL]];
        int numLeft=k-inL;
        root->left=create(preorder,inorder,preL+1,preL+numLeft,inL,k-1);
        root->right=create(preorder,inorder,preL+numLeft+1,preR,k+1,inR);
        return root;
    }

};
