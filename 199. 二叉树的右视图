/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> res;
    vector<int> rightSideView(TreeNode* root) {
   
        
        // queue<TreeNode*> s;
        // s.push(root);
        // while(!s.empty()){
        //     int n=s.size();
        //     for(int i=0;i<n;i++){
        //         TreeNode* temp=s.front();
        //         s.pop();
        //         if(temp->left)
        //             s.push(temp->left);
        //         if(temp->right)
        //             s.push(temp->right);
        //         if(i==n-1)
        //         res.push_back(temp->val);
        //     }
        // }
        dfs(root,0);
        return res;
    }
    void dfs(TreeNode* &root,int depth){
        if(!root)
            return;
        if(depth==res.size())
        res.push_back(root->val);
        depth++;
        dfs(root->right,depth);
        dfs(root->left,depth);

    }
};
