class Solution {
public:
    vector<string> letterCombinations(string digits) {
        vector<string> res;
        if(digits.empty()){
            return {};
        }
        unordered_map<char,string> m{
            {'2',"abc"},
            {'3',"def"},
            {'4',"ghi"},
            {'5',"jkl"},
            {'6',"mno"},
            {'7',"pqrs"},
            {'8',"tuv"},
            {'9',"wxyz"}
        };
        string temp;
        backtrack(res,m,digits,0,temp);
        return res;

    }
    void backtrack(vector<string>& res,unordered_map<char,string>& m,string& digits,int index,string temp){
        if(index==digits.size()){
            res.push_back(temp);
            return;
        }else{
            char digit=digits[index];
            string letters=m[digit];
            for(char i:letters){
                // for(int i=0;i<letters.size();i++){
                // temp.push_back(letters[i]);
                temp.push_back(i);
                backtrack(res,m,digits,index+1,temp);
                temp.pop_back();
            }
        }
    }
        
};
